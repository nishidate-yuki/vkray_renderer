#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_ARB_shader_clock : enable

#include "globals.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 5, set = 0) uniform UBO
{
	mat4 invView;
	mat4 invProj;
    vec3 sunDir;
    int sampleCount;
    int reflesh;
} ubo;

layout(location = 0) rayPayloadEXT HitPayload payLoad;

uint pcg(inout uint state)
{
    uint prev = state * 747796405u + 2891336453u;
    uint word = ((prev >> ((prev >> 28u) + 4u)) ^ prev) * 277803737u;
    state     = prev;
    return (word >> 22u) ^ word;
}

uvec2 pcg2d(uvec2 v)
{
  v = v * 1664525u + 1013904223u;

  v.x += v.y * 1664525u;
  v.y += v.x * 1664525u;

  v = v ^ (v >> 16u);

  v.x += v.y * 1664525u;
  v.y += v.x * 1664525u;

  v = v ^ (v >> 16u);

  return v;
}

float rand(inout uint seed)
{
    uint val = pcg(seed);
    return (float(val) * (1.0 / float(0xffffffffu)));
}

vec3 cosineSampleHemisphere(float u1, float u2)
{
  vec3  dir;
  float r   = sqrt(u1);
  float phi = 2.0 * M_PI * u2;
  dir.x     = r * cos(phi);
  dir.y     = r * sin(phi);
  dir.z     = sqrt(max(0.0, 1.0 - dir.x * dir.x - dir.y * dir.y));

  return dir;
}

void createCoordinateSystem(in vec3 N, out vec3 Nt, out vec3 Nb)
{
  if(abs(N.x) > abs(N.y))
    Nt = vec3(N.z, 0, -N.x) / sqrt(N.x * N.x + N.z * N.z);
  else
    Nt = vec3(0, -N.z, N.y) / sqrt(N.y * N.y + N.z * N.z);
  Nb = cross(N, Nt);
}

vec3 sampleHemisphere(vec2 randVal, in vec3 x, in vec3 y, in vec3 z)
{
  float r1        = randVal.x;
  float r2        = randVal.y;
  vec3  direction = cosineSampleHemisphere(r1, r2);
  return direction.x * x + direction.y * y + direction.z * z;
}

vec3 sampleDirection(vec2 randVal, vec3 normal)
{
    vec3 tangent;
    vec3 bitangent;
    createCoordinateSystem(normal, tangent, bitangent);
    vec3 dir = cosineSampleHemisphere(randVal.x, randVal.y);
    return dir.x * tangent + dir.y * bitangent + dir.z * normal;
}

vec3 toWorld(vec3 dir, vec3 normal)
{
    vec3 tangent;
    vec3 bitangent;
    createCoordinateSystem(normal, tangent, bitangent);
    return dir.x * tangent + dir.y * bitangent + dir.z * normal;
}

vec3 tonemap(in vec3 color, in float white)
{
  return clamp(color * (1 + color / white) / (1 + color), 0, 1);
}

vec3 gammaCorrect(in vec3 color)
{
  return pow(color, vec3(1.0/2.2));
}

void main()
{
	float tmin = 0.01;
	float tmax = 10000.0;
    vec3 color = vec3(0.0);
    uint maxDepth = 4;

    int sampleCount = ubo.sampleCount;
    uvec2 s = pcg2d(ivec2(gl_LaunchIDEXT.xy) * sampleCount);
    uint seed = s.x + s.y;

	const vec2 pixelPos = vec2(gl_LaunchIDEXT.xy) + vec2(rand(seed), rand(seed));
	const vec2 inUV = pixelPos/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin    = ubo.invView * vec4(0, 0, 0, 1);
	vec4 target    = ubo.invProj * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = ubo.invView * vec4(normalize(target.xyz), 0) ;

    vec3 throughput = vec3(1.0);
    payLoad.done = false;

    for(uint depth = 0; depth < maxDepth; depth++){
        payLoad.contribution = vec3(0.0);
        payLoad.hitted = false;
        traceRayEXT(
            topLevelAS,
            gl_RayFlagsOpaqueEXT,
            0xff, // cullMask
            0,    // sbtRecordOffset
            0,    // sbtRecordStride
            0,    // missIndex
            origin.xyz,
            tmin,
            direction.xyz,
            tmax,
            0     // payloadLocation
        );

        if(!payLoad.hitted){
            break;
        }

        if(payLoad.done){
            // 太陽光が当たった
            color = throughput * payLoad.contribution;
            break;
        }else{
            vec2 randVal = vec2(rand(seed), rand(seed));
            origin = vec4(payLoad.hitPosition, 1.0);
            direction = vec4(sampleDirection(randVal, payLoad.hitNormal), 1.0);
            float pdf = 0.5;
            throughput *= payLoad.contribution / pdf;
        }
    }

    color = gammaCorrect(color);
    if(ubo.reflesh == 1){
	    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
    }else{
        vec4 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy));
        vec4 newColor = (oldColor * sampleCount + vec4(color, 0.0)) / float(sampleCount + 1);
	    imageStore(image, ivec2(gl_LaunchIDEXT.xy), newColor);
    }
}
